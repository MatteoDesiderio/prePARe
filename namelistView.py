from PyQt5 import QtWidgets as qtwfrom PyQt5.QtCore import Qtfrom parametersView import ParametersViewclass NamelistView(qtw.QWidget):    def __init__(self, default_namelist):        super().__init__()        self.default_namelist = default_namelist        self.layout = qtw.QVBoxLayout()        self.splitter = qtw.QSplitter(Qt.Horizontal)        self.list = qtw.QListWidget()        self.frame = ParametersView(default_namelist)        self.initUI()        # listen for changes        self.list.itemChanged.connect(self.submitCheckedItems)                    def initUI(self):        self.splitter.setHandleWidth(2)        self.splitter.setStyleSheet("QSplitter::handle {  image: url(fake); }")        # draw the list of parameters        self.list.setSelectionMode(qtw.QAbstractItemView.ExtendedSelection)        for param in self.default_namelist.parameters:            item = qtw.QListWidgetItem(param.name)            item.setFlags(item.flags() | Qt.ItemIsUserCheckable )            item.setCheckState(Qt.Unchecked)            self.list.addItem(item)        self.list.setCurrentRow(0)        # draw the frame for the added parameters        self.frame.setFrameShape(qtw.QFrame.StyledPanel)                self.scroll = qtw.QScrollArea()        self.scroll.setWidget(self.frame)        self.scroll.setWidgetResizable(True)                # fill layout        self.splitter.addWidget(self.list)        self.splitter.addWidget(self.scroll)        self.layout.addWidget(self.splitter)        self.setLayout(self.layout)            def keyPressEvent(self, e):        if e.key() == Qt.Key_Return:            selectedItems = self.list.selectedItems()            for item in selectedItems:                                if item.checkState() == Qt.Checked:                    item.setCheckState(Qt.Unchecked)                else:                    item.setCheckState(Qt.Checked)            def submitCheckedItems(self, item):        name = item.text()        if item.checkState() == Qt.Checked:            self.frame.show(name)        else:            self.frame.hide(name)   