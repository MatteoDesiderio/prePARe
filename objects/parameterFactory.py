import numpy as npfrom .parameter import ParameterArray, ParameterSingledef dispatch(name, value, parent_namelist):    sanitized =  _sanitize(value)    selectedDispatcher = _getDispatcher(sanitized)    return selectedDispatcher(name, sanitized, parent_namelist)def _sanitize(value):    """    Reads line as an array or single value    """    sanitized = np.array(value.replace("(/","").replace("/)", "").rsplit(","))            if len(sanitized) > 1:        return sanitized    else:        return sanitized[0]        def _isArray(value):    """    Checks if array    """    if isinstance(value, np.ndarray):        return True    else:        return Falsedef _getDispatcher(value):    """    Returns correct dispatcher    """    if _isArray(value):        return _dispatchArray    else:        return _dispatchSingleVal    def _dispatchSingleVal(name, value, parent_namelist):    """    Returns a single parameter class instance    """    dtype = _getdType(value)    return ParameterSingle(name, dtype(value), parent_namelist, dtype)def _dispatchArray(name, value, parent_namelist):    """    Returns an array-like parameter class instance    """    dtype = _getdTypeArray(value)    return ParameterArray(name, value.astype(dtype), parent_namelist, dtype)    def _getdType(value):    if value == ".true." or value == ".false.":        _type = bool    elif value.isdigit():        _type = int    else:        noExp = value.replace("e", "")        if noExp.replace("_", "").replace("'", "").isalnum():            _type = str        elif noExp == "":            _type = str        else:            _type = float    return _type         def _getdTypeArray(value):    types = np.array([_getdType(v) for v in value])        if np.any(types == bool):        _type = bool    elif np.any(types == str):        _type = str    elif np.any(types == int):        _type = int    else:         _type = float               return _type